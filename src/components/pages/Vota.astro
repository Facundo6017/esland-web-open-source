---
import Layout from "@/layouts/Layout.astro";
import { VoteSystem } from "@/components/VoteSystem.tsx";
import { getRelativeLocaleUrl } from "astro:i18n";
import Button from "@/components/Button.astro";
import { getSession } from "auth-astro/server";
import Svg from "@/components/Svg.astro";
import Img from "@/components/Img.astro";

const { i18n } = Astro.locals;
const { currentLocale = "es" } = Astro;

const session = await getSession(Astro.request);

const bkg = session ? "vote-system-bkg.webp" : "vota-bkg.webp";
---

<Layout title={i18n.SEO.VOTE_TITLE} description={i18n.SEO.VOTE_DESCRIPTION}>
  <section
    class="bg-no-repeat bg-cover relative pb-24 min-h-screen w-full max-w-[100vw]"
  >
    <Img
      class="absolute h-full w-full animate-fade object-cover object-center animate-duration-1000 animate-ease-in-out -z-10"
      src={bkg}
      alt="ESLAND cover"
    />

    {
      !session && (
        <div class="mx-auto flex flex-col max-w-7xl px-6 pt-40">
          <h1 class="uppercase mb-10 text-left text-3xl lg:text-5xl font-bold tracking-wider leading-loose max-w-xl text-balance">
            {i18n.VOTE.TITLE}
          </h1>

          <div class="mb-10">
            <Button
              id="vote-button"
              data-return-url={getRelativeLocaleUrl(currentLocale, "vota")}
            >
              {i18n.VOTE.CALL_TO_VOTE}
            </Button>
          </div>
          <p
            set:html={i18n.VOTE.INTRO_CONTENT}
            class="max-w-3xl text-pretty text-2xl px-2 mb-10"
          />

          <ul class="flex flex-col gap-y-10 text-2xl pl-4 font-extralight">
            <li class="flex gap-x-6 items-center">
              <Svg src="sort.vote" />
              <span set:html={i18n.VOTE.ADVICE_1} />
            </li>

            <li class="flex gap-x-6 items-center">
              <Svg src="check.pencil" />
              <span set:html={i18n.VOTE.ADVICE_2} />
            </li>

            <li class="flex gap-x-6 items-center">
              <Svg src="podium" />
              <span set:html={i18n.VOTE.ADVICE_3} />
            </li>

            <li class="flex gap-x-6 items-center">
              <>
                <Svg src="tap.button" />
                <span set:html={i18n.VOTE.ADVICE_4} />
              </>
            </li>

            <li class="flex gap-x-6 items-center">
              <>
                <Svg src="share" />
                <span set:html={i18n.VOTE.ADVICE_5} />
              </>
            </li>

            <li class="flex gap-x-6 items-center">
              <Svg src="think.brain" />
              <span set:html={i18n.VOTE.ADVICE_6} />
            </li>
            <span class="opacity-85 text-base mt-4">
              {i18n.VOTE.TIME_LIMIT}
            </span>
          </ul>
        </div>
      )
    }

    {
      session && (
        <div class="mx-auto flex flex-col max-w-7xl pt-20 relative">
          <VoteSystem client:load i18n={i18n}>
            <div class="flex items-center gap-4">
              <img
                class="w-12 h-12 rounded-full"
                src={session.user?.image}
                alt=""
              />
              <div class="text-yellow-300">
                <h4 class="font-bold text-xl">{session.user?.name}</h4>
                <button
                  id="logout-button"
                  class="text-sm hover:border-white border-b font-light border-transparent text-white flex justify-center items-center gap-x-2"
                >
                  {i18n.LOG_OUT}
                </button>
              </div>
            </div>
          </VoteSystem>
        </div>
      )
    }
  </section>
</Layout>

<script>
  import { signOut } from "auth-astro/client";
  // @ts-ignore
  window.signIn = async (providerId, options, authorizationParams) => {
    const { callbackUrl = window.location.href, redirect = true, currentLocale = "es" } =
      options ?? {};
    const { prefix = "/api/auth", ...opts } = options ?? {};

    // TODO: Support custom providers
    const isCredentials = providerId === "credentials";
    const isEmail = providerId === "email";
    const isSupportingReturn = isCredentials || isEmail;

    // TODO: Handle custom base path
    const signInUrl = `${prefix}/${
      isCredentials ? "callback" : "signin"
    }/${providerId}`;

    const _signInUrl = `${signInUrl}?${new URLSearchParams(
      authorizationParams
    )}`;

    // TODO: Handle custom base path
    const csrfTokenResponse = await fetch(`${prefix}/csrf`);
    const { csrfToken } = await csrfTokenResponse.json();

    const res = await fetch(_signInUrl, {
      method: "post",
      headers: {
        "Content-Type": "application/x-www-form-urlencoded",
        "X-Auth-Return-Redirect": "1",
      },
      body: new URLSearchParams({
        ...opts,
        csrfToken,
        callbackUrl,
      }),
    });

    const data = await res.clone().json();
    const url = new URL(data.url);
    // Si anexto el callbackUrl a la url de retorno como parametro
    if (url.searchParams.has("redirect_uri")) {
      const redirectUri =  url.searchParams.get("redirect_uri");
      const rUri = new URL(redirectUri as string);
      if (!rUri.searchParams.has("callbackUrl")) {
        rUri.searchParams.set("callbackUrl", callbackUrl);
        url.searchParams.set("redirect_uri", rUri.href);
      }
    }
    const error = url.searchParams.get("error");
    if (redirect || !isSupportingReturn || !error) {
      // TODO: Do not redirect for Credentials and Email providers by default in next major
      window.location.href = url.href ?? callbackUrl;
      // If url contains a hash, the browser does not reload the page. We reload manually
      if (url.href.includes("#")) window.location.reload();
      return;
    }

    return res;
  };
  // @ts-ignore
  window.signOut = signOut;
</script>

<script client:load>
  // TODO Apesar del warning no se por que astro no esta generando el Aisland para el componente es por eso que me toco colocar client:load
  // pongo un $ delante para que se vea que es un elemento del DOM
  // es una cosa que se hacía en el pasado con jQuery y es una manía
  // que se me ha quedado porque me gusta :)
  const $loginButton = document.querySelector("#vote-button");
  const $logoutButton = document.querySelector("#logout-button");

  $loginButton?.addEventListener("click", async (event) => {
    const callbackUrl = $loginButton?.dataset?.returnUrl;
    event.preventDefault();
    await signIn(
      "twitch",
      {
        callbackUrl,
      }
    );
  });

  $logoutButton?.addEventListener("click", async (event) => {
    event.preventDefault();
    await signOut();
  });
</script>

<style>
  p {
    text-shadow:
      0 0 5px rgba(0, 0, 0, 0.3),
      0 0 10px rgba(0, 0, 0, 0.7);
  }
</style>
